<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-2.5.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-2.5.xsd">
<!--
	===================================================================================
	The main test runner class loaded with a choice of graph db back end
	=================================================================================== 
 -->
	<bean id="testRunner" class="com.tinkerpop.graph.benchmark.TestBatchGraphLoad" lazy-init="true">
		<property name="benchmarkResultsFilename" value="results/benchmark.csv"/>
		<property name="inputTestDataFile" value="data/page_links_en.nt.bz2"/>		
		<!-- ============ Pick a choice of graph loader implementation here ====================== -->
<!--    		 <property name="graphLoaderService" ref="neoLoader" />  -->  
<!-- 		<property name="graphLoaderService" ref="mockLoader" /> -->   
   		<property name="graphLoaderService" ref="indexOnlyLoader"/>   
<!--   		<property name="graphLoaderService" ref="orientLoader"/>  -->
		
	</bean>
	
	<!-- ==================================================================================== -->
	<!--       Choices of graph service -->
	<!-- ==================================================================================== -->
	<!--  A do-nothing implementation purely used to obtain a benchmark for reading the source datafile -->	
	<bean id="mockLoader" class="com.tinkerpop.graph.benchmark.loader.MockGraphLoaderServiceImpl" lazy-init="true"/>
	
	
	<!--  An implementation which does not persist into a graph database but does provide a benchmark for a choice of key-lookup
	     service required to remember which keys are associated with which Vertex.	 
	 -->	
	<bean id="indexOnlyLoader" class="com.tinkerpop.graph.benchmark.loader.GraphIndexOnlyLoaderServiceImpl" lazy-init="true" >
<!--	 <property name="keyService" ref="fastLuceneKeyService"></property>  -->
<!-- 		 <property name="keyService" ref="berkeleyKeyService"></property> -->
 		<property name="keyService" ref="kratiKVStore"></property> 
<!-- 		 <property name="keyService" ref="fastLuceneKVStore"></property> -->
		
	</bean>
	
	<bean id="neoLoader" class="com.tinkerpop.graph.benchmark.loader.Neo4JLoaderImpl" init-method="init" lazy-init="true">
		<property name="neoDbDirName" value="indexes/wikipediaNeo4j" />
		<property name="batchPropertiesFileName" value="config/neo4jBatch.properties" />

		<!-- Optionally provide a custom choice of KeyService in place of Neo default -->	
		<!-- <property name="keyService"  ref="berkeleyKeyService"/>  -->  		
		 <!-- <property name="keyService" ref="fastLuceneKeyService"></property> --> 
		 <property name="keyService" ref="fastLuceneKVStore"></property> 
	</bean>
	
	
	<bean id="orientLoader" class="com.tinkerpop.graph.benchmark.loader.OrientDbNativeLoaderImpl" lazy-init="true" init-method="init">
		<property name="orientDbDirName" value="indexes/wikipediaOrientDb"/>
		<property name="orientDbName" value="wikipediaOrientDb"/>
		<property name="useInternalOrientIndex" value="false" /> <!-- Replaces Orients index service with a faster one -->
	</bean>
	
	
	
	<!-- ======================================================================================== -->
	<!--       Choices of index service. 													     -->
	<!--       Some of the above graph databases can choose to use an index service to remember  -->
	<!--       which vertices have already been loaded                                           -->
	<!-- ==================================================================================== -->	
	<bean id="fastLuceneKeyService" class="com.tinkerpop.graph.benchmark.index.LuceneKeyToNodeIdIndexImpl" lazy-init="true" init-method="init">
		<constructor-arg value="indexes/wikipediaNeo4jMHLucene"/>
		<constructor-arg value="false"/>
		<property name="useCompoundFile" value="false"/>
		<property name="ramBufferSizeMB" value="300"/>
		<property name="termIndexIntervalSize" value="512"/>
		<property name="bloomFilterSize" value="50000000"/>				
		<property name="maxNumRecordsBeforeCommit" value="500000"/>
		<property name="lruCacheSize" value="500000"/>
	</bean>
	
	
	<bean id="fastLuceneKVStore" class="com.tinkerpop.graph.benchmark.index.LuceneKVStoreIndexServiceImpl" lazy-init="true" init-method="init">
		<constructor-arg value="indexes/wikipediaNeo4jLuceneKVStore"/>
	</bean>
	
	<bean id="kratiKVStore" class="com.tinkerpop.graph.benchmark.index.KratiIndexServiceImpl" lazy-init="true" init-method="init">
		<constructor-arg value="indexes/kratiKVStore"/>
		<property name="segmentType" value="Channel"/> <!-- options are Memory, Mapped or Channel. See http://sna-projects.com/krati/design.php -->
	</bean>	
	<bean id="berkeleyKeyService" class="com.tinkerpop.graph.benchmark.index.BerkeleyIndexImpl"  lazy-init="true">
				<constructor-arg value="indexes/berkleyKeyIndex"/>
	</bean>
	
</beans>
